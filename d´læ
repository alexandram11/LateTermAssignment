[1mdiff --cc out/production/TicTac/Domain/TicTac.class[m
[1mindex de418c8,776b296..0000000[m
Binary files differ
[1mdiff --cc out/production/TicTac/test/TicTacTest.class[m
[1mindex 16b29f6,2522373..0000000[m
Binary files differ
[1mdiff --cc src/Domain/TicTac.java[m
[1mindex b32863e,cded803..0000000[m
[1m--- a/src/Domain/TicTac.java[m
[1m+++ b/src/Domain/TicTac.java[m
[36m@@@ -22,19 -16,18 +22,24 @@@[m [mpublic class TicTac [m
          playerWhoWon = 0;[m
      }[m
  [m
[32m++<<<<<<< HEAD[m
[32m +    // Creates a new board[m
[32m +    public void NewGame() {[m
[32m++=======[m
[32m+     public void newGame() {[m
[32m++>>>>>>> Change TicTac so it can handle any size of board.[m
          turnCount = 0;[m
          for (int i = 0; i < boardSize; i++)[m
              for (int j = 0; j < boardSize; j++)[m
                  board[i][j] = 0;[m
[32m+         playerWhoWon = 0;[m
      }[m
  [m
[32m +    // Checks if any there is any legal moves left[m
      public boolean canMakeMove(int i, int j) {[m
[31m-         return i < 3 && i >= 0 &&[m
[31m-                 j < 3 && j >= 0 &&[m
[31m-                 turnCount < 9 &&[m
[32m+         return i < boardSize && i >= 0 &&[m
[32m+                 j < boardSize && j >= 0 &&[m
[32m+                 turnCount < boardSize * boardSize &&[m
                  board[i][j] == 0 &&[m
                  !hasVictory();[m
      }[m
[36m@@@ -57,13 -48,25 +62,26 @@@[m
          return (turnCount % 2) + 1;[m
      }[m
  [m
[32m +    // Checks possible victory combinations[m
      public boolean checkDiagonalVictory() {[m
[31m-         if (board[1][1] != 0)[m
[31m-             if ((board[2][2] == board[1][1] && board[1][1] == board[0][0]) || (board[2][0] == board[1][1] && board[1][1] == board[0][2]))[m
[31m-                 return true;[m
[32m+         boolean hasVictory = true;[m
[32m+         for (int i = 0; i + 1 < boardSize; )[m
[32m+             for (int j = 0; j + 1 < boardSize; )[m
[32m+                 if (board[i][j] != board[++i][++j])[m
[32m+                     hasVictory = false;[m
[32m+         if (board[0][0] != 0 && hasVictory)[m
[32m+             return true;[m
  [m
[31m-         return false;[m
[32m+         hasVictory = true;[m
[32m+         for (int i = 0; i + 1 < boardSize; )[m
[32m+             for (int j = boardSize - 1; j > 0; )[m
[32m+                 if (board[i][j] != board[++i][--j])[m
[32m+                     hasVictory = false;[m
[32m+ [m
[32m+         if (board[0][boardSize - 1] == 0 && hasVictory)[m
[32m+             hasVictory = false;[m
[32m+ [m
[32m+         return hasVictory;[m
      }[m
  [m
      public boolean checkHorizontalVictory() {[m
